using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Deikstr
{

    class DijkstraData {

        public double Price {get; set; }
        public Node Previous { get; set; }
    }
    class Program
    {

        public static List<Node> DijkstraAlgorithm(Graph graph, Dictionary<Edge, double> weight, Node start, Node end)
        {

            List<Node> notVisited = graph.Nodes.ToList(); // список вершин которые мы еще не посетили
            var track = new Dictionary<Node, DijkstraData>(); // трекинг в котором храним информацию об оценках каждой вершины
            track[start] = new DijkstraData { Previous = null, Price = 0 };//информация о нулевой вершине

            while (true)
            {
                Node toOpen = null;
                double bestPrice = double.PositiveInfinity;
                foreach (var v in notVisited)
                {
                    if (track.ContainsKey(v) && track[v].Price < bestPrice)
                    {
                        toOpen = v;
                        bestPrice = track[v].Price;
                    }
                }
                    //обработаем случай когда вергина равна null(т.е. когда в графе нету подходящих для раскрытия вершин)
                    if (toOpen == null) return null;
                //если вершина конечна выходим из беск цикла
                    if (toOpen == end) break;
                    //пройдем по всем ребрам у которых эта вершина является начальной:
                    foreach(var e in toOpen.IncidentEdges.Where(z=>z.From==toOpen))
                    {  //для каждого такого ребра возьмем текущую цену + вес соответсв ребра
                        var currentPrice=track[toOpen].Price + weight[e];
                        var nextNode= e.OtherNode(toOpen);
                        //если для этой вершины еще не найдена вообще никакая оценка или найденай оценка хуже чем посчитаная через раскрываемую вершину
                        if (!track.ContainsKey(nextNode) || track[nextNode].Price > currentPrice)
                            //тогда обновим данные так:(поставлю туда новую цену,и сохроню ту вершину куда мы тогда пришли)
                            track[nextNode]=new DijkstraData{Price=currentPrice,Previous =toOpen};
                }
            //раскрытие вершины можно считать законченым,исключу ее из списка notVisited:
                    notVisited.Remove(toOpen);
            }
            //заводим результат
            var result = new List<Node>();
            while (end != null)
            {
                result.Add(end);
                end = track[end].Previous;
            }
            //разворачиваем result
            result.Reverse();
            return result;
        
        }
       public static void Main(string[] args)
        {
            var graph = Graph.MakeGraph(

                0, 1,
                0, 2,
                0, 3,
                1, 3,
                2, 3
                );
            var weight = new Dictionary<Edge, double>();
            weight[graph[0, 1]] = 1;
            weight[graph[0, 2]] = 2;
            weight[graph[0, 3]] = 6;
            weight[graph[1, 3]] = 4;
            weight[graph[2, 3]] = 2;

        }
    }
}
